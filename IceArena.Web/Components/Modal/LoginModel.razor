@using Blazored.LocalStorage
@using IceArena.Data.Requests
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@rendermode InteractiveServer

<div class="modal-overlay @(IsOpen ? "show" : "")" @onclick="CloseModal" style="@(IsOpen ? "" : "display: none;")">
    <div class="modal-content" @onclick:stopPropagation>
        <h2>Авторизация</h2>
        <input type="email" placeholder="Email" @bind="email" />
        <input type="password" placeholder="Пароль" @bind="password" />
        <div class="modal-actions">
            <button @onclick="Login">Войти</button>
            <button @onclick="CloseModal">Отмена</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    private string email = "";
    private string password = "";

    private async Task Login()
    {
        try
        {
            var request = new LoginRequest { Email = email, Password = password };
            var response = await AuthService.Login(request);

            await LocalStorage.SetItemAsStringAsync("authToken", response.Token);
            await LocalStorage.SetItemAsStringAsync("username", response.Username);
            await LocalStorage.SetItemAsStringAsync("role", response.Role);

            await ((CustomAuthStateProvider)AuthStateProvider).MarkUserAsAuthenticated(response.Username, response.Role);
            await IsOpenChanged.InvokeAsync(false);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при входе: {ex.Message}");
        }
    }

    private async Task CloseModal()
    {
        await IsOpenChanged.InvokeAsync(false);
    }
}