@page "/booking"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using IceArena.Data.Models
@using System.Linq

<h1 class="bron">У нас вы можете забронировать:</h1>

<div class="bookingsdiv">
    <div class="bookingdiv"
         style="background-image: url('../images/ledoviyelka.jpg'); cursor: pointer;"
         @onclick="ShowAvailableSlots">
        <div class="imgh1">
            <h1 class="nazvanie">Ледовая площадка</h1>
        </div>
    </div>
</div>

@if (showLoginModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Войдите в систему</h3>
            <p>Для бронирования необходимо войти.</p>
            <button class="btn btn-secondary" @onclick="CloseLoginModal">Хорошо</button>
        </div>
    </div>
}

@if (isSlotsVisible)
{
    @if (isLoading)
    {
        <p>Загрузка доступных слотов...</p>
    }
    else if (availableSlotsByDate == null || !availableSlotsByDate.Any())
    {
        <p>Нет доступных слотов.</p>
    }
    else
    {
        <div class="slots-containers">
            @foreach (var dateGroup in availableSlotsByDate)
            {
                <div class="blockcard">
                    <h2 class="dateee">Дата: @dateGroup.Key.ToShortDateString()</h2>
                    <div class="slots-container">
                        @foreach (var slot in dateGroup.Value)
                        {
                            <div class="slot-card" @onclick="@(() => SelectSlot(slot))">
                                <p><strong>Время:</strong> @slot.StartTime.ToString(@"hh\:mm") - @slot.EndTime.ToString(@"hh\:mm")</p>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
}

@if (showConfirmationModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Вы уверены?</h3>
            <p>Вы хотите забронировать время: @selectedTime?.ToString(@"hh\:mm")</p>
            <button class="btn btn-success" @onclick="ConfirmBooking">Подтвердить</button>
            <button class="btn btn-secondary" @onclick="CancelBooking">Отменить</button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(notificationMessage))
{
    <div class="alert alert-success notification">
        @notificationMessage
    </div>
}

@code {
    private Dictionary<DateTime, List<IceArena.Data.Models.Booking>> availableSlotsByDate = new();
    private DateTime? selectedDate;
    private TimeSpan? selectedTime;
    private bool showConfirmationModal = false;
    private bool isLoading = false;
    private bool isSlotsVisible = false;
    private string notificationMessage = "";
    private bool showLoginModal = false;

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task ShowAvailableSlots()
    {
        isSlotsVisible = true;
        await LoadAvailableSlots();
    }

    private async Task LoadAvailableSlots()
    {
        isLoading = true;
        try
        {
            var allSlots = await Http.GetFromJsonAsync<List<IceArena.Data.Models.Booking>>("api/Booking/available");

            if (allSlots == null || !allSlots.Any())
            {
                Console.WriteLine("Доступных слотов нет.");
            }
            else
            {
                availableSlotsByDate = allSlots
                    .GroupBy(slot => slot.Date.Date)
                    .ToDictionary(group => group.Key, group => group.ToList());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при получении слотов: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    private void SelectSlot(IceArena.Data.Models.Booking slot)
    {
        selectedDate = slot.Date;
        selectedTime = slot.StartTime;
        CheckUserAndOpenModal();
    }

    private async void CheckUserAndOpenModal()
    {
        var userId = await GetCurrentUserIdAsync();

        if (userId <= 0)
        {
            showLoginModal = true;
            StateHasChanged();
            return;
        }

        var userBookings = await Http.GetFromJsonAsync<List<IceArena.Data.Models.Booking>>($"api/Booking/user/{userId}");

        if (userBookings != null)
        {
            var today = selectedDate?.Date ?? DateTime.UtcNow.Date;

            var bookingsToday = userBookings
                .Where(b => b.Date.Date == today.Date)
                .ToList();

            if (bookingsToday.Count >= 2)
            {
                notificationMessage = "Вы не можете забронировать более 2 слотов за день.";
                showLoginModal = false;
                showConfirmationModal = false;
                StateHasChanged();
                return;
            }
        }

        showLoginModal = false;
        showConfirmationModal = true;
        StateHasChanged();
    }

    private async Task ConfirmBooking()
    {
        if (selectedDate.HasValue && selectedTime.HasValue)
        {
            var bookingId = availableSlotsByDate[selectedDate.Value.Date]
                .FirstOrDefault(s => s.StartTime == selectedTime)?.Id;

            if (bookingId.HasValue)
            {
                var userId = await GetCurrentUserIdAsync();
                if (userId > 0)
                {
                    var response = await Http.PostAsJsonAsync<object>($"api/Booking/confirm/{bookingId.Value}/{userId}", null);
                    if (response.IsSuccessStatusCode)
                    {
                        notificationMessage = "Бронь успешно подтверждена!";
                        showConfirmationModal = false;
                        await LoadAvailableSlots();
                        _ = HideNotificationAfterDelay();
                    }
                    else
                    {
                        Console.WriteLine("Ошибка при подтверждении бронирования.");
                    }
                }
            }
        }
    }

    private void CancelBooking()
    {
        showConfirmationModal = false;
        StateHasChanged();
    }

    private async Task<int> GetCurrentUserIdAsync()
    {
        var userIdString = await LocalStorage.GetItemAsStringAsync("userId");
        return int.TryParse(userIdString, out var userId) ? userId : 0;
    }

    private void CloseLoginModal()
    {
        showLoginModal = false;
        StateHasChanged();
    }

    private async Task HideNotificationAfterDelay(int delaySeconds = 5)
    {
        await Task.Delay(delaySeconds * 1000);
        notificationMessage = "";
        StateHasChanged();
    }
}