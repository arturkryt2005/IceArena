@page "/bookings"
@using IceArena.Data.Models
@using IceArena.Data.Requests
@inject IEmailService EmailService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@rendermode InteractiveServer

<h3>Бронирования</h3>

@if (bookings == null || users == null)
{
    <p>Загрузка...</p>
}
else if (bookings.Count == 0)
{
    <p>Нет активных бронирований.</p>
}
else
{
    <div class="sort-options">
        <label for="sort">Сортировать по:</label>
        <select id="sort" @bind="sortOption">
            <option value="dateAsc">Дате (по возрастанию)</option>
            <option value="dateDesc">Дате (по убыванию)</option>
            <option value="status">Статусу</option>
        </select>
    </div>

    <table class="booking-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Пользователь</th>
                <th>Дата</th>
                <th>Длительность</th>
                <th>Статус</th>
                <th>Создано</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in sortedBookings)
            {
                var user = users.FirstOrDefault(u => u.Id == booking.UserId);
                <tr class="booking-row @booking.Status.ToLower()">
                    <td>@booking.Id</td>
                    <td>
                        @if (user != null)
                        {
                            <div>
                                <strong>@user.Username</strong><br />
                                Email: @user.Email<br />
                                Телефон: @user.PhoneNumber
                            </div>
                        }
                        else
                        {
                            <span>Пользователь не найден</span>
                        }
                    </td>
                    <td>@booking.Date.ToString("dd.MM.yyyy HH:mm")</td>
                    <td>@booking.Duration минут</td>
                    <td>@booking.Status</td>
                    <td>@booking.CreatedAt.ToString("dd.MM.yyyy HH:mm")</td>
                    <td>
                        @if (booking.Status == "Pending")
                        {
                            <button class="btn btn-primary" @onclick="() => AcceptBooking(booking.Id, user?.Email)">
                                Отправить письмо
                            </button>
                        }
                        else
                        {
                            <span>-</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<p>@Message</p>

@code {
    private string Message = "";
    private List<Booking>? bookings;
    private List<User>? users;
    private string sortOption = "dateAsc";

    protected override async Task OnInitializedAsync()
    {
        bookings = await Http.GetFromJsonAsync<List<Booking>>("api/Booking");
        users = await Http.GetFromJsonAsync<List<User>>("api/User");
    }

    private List<Booking> sortedBookings => sortOption switch
    {
        "dateAsc" => bookings?.OrderBy(b => b.CreatedAt).ToList() ?? new List<Booking>(),
        "dateDesc" => bookings?.OrderByDescending(b => b.CreatedAt).ToList() ?? new List<Booking>(),
        "status" => bookings?.OrderBy(b => b.Status).ToList() ?? new List<Booking>(),
        _ => bookings?.ToList() ?? new List<Booking>()
    };

    private async Task AcceptBooking(int bookingId, string? userEmail)
    {
        if (string.IsNullOrEmpty(userEmail))
        {
            Message = "Ошибка: Email пользователя не указан";
            return;
        }

        var result = await EmailService.SendMessage(userEmail);

        if (result.Success)
        {
            Message = $"Письмо успешно отправлено на {userEmail}";

            var booking = bookings.FirstOrDefault(b => b.Id == bookingId);
            if (booking != null)
            {
                booking.Status = "Booked";
            }

            StateHasChanged();
        }
        else
        {
            Message = $"Ошибка при отправке письма: {result.ErrorMessage}";
        }
    }
}