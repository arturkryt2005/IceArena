@page "/announcementcontrol"
@using IceArena.Data.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer

<PageTitle>Объявления</PageTitle>

@if (announcements == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    @if(role == "admin")
    {
        <div class="mb-3">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <i class="fas fa-plus"></i> Добавить новое объявление
            </button>
        </div>
    }

    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Title</th>
                    <th>Image</th>
                    <th>Created At</th>
                    @if (role == "admin")
                    {
                        <th>Actions</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var announcement in announcements)
                {
                    <tr>
                        <td>@announcement.Title</td>
                        <td>
                            @if (announcement.ImageData != null)
                            {
                                <img src="@GetImageSrc(announcement)"
                                class="img-thumbnail"
                                style="max-height: 60px; cursor: pointer;"
                                @onclick="() => ShowImagePreview(announcement)" />
                            }
                            else
                            {
                                <span class="text-muted">No image</span>
                            }
                        </td>
                        <td>@announcement.CreatedAt.ToString("g")</td>
                        @if (role == "admin")
                        {
                            <td>
                                <button class="btn btn-sm btn-info me-2" @onclick="() => ShowEditModal(announcement)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteAnnouncement(announcement.Id)">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal fade show" style="display: block; background: rgba(0,0,0,0.5)" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">@(currentAnnouncement.Id == 0 ? "Create" : "Edit") Announcement</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentAnnouncement" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="title" class="form-label">Title *</label>
                            <InputText id="title" @bind-Value="currentAnnouncement.Title" class="form-control" />
                            <ValidationMessage For="@(() => currentAnnouncement.Title)" />
                        </div>

                        <div class="mb-3">
                            <label for="content" class="form-label">Content</label>
                            <InputTextArea id="content" @bind-Value="currentAnnouncement.Content" class="form-control" rows="5" />
                            <ValidationMessage For="@(() => currentAnnouncement.Content)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Image</label>
                            <div>
                                <InputFile OnChange="HandleImageUpload" class="form-control" accept="image/*" />
                                <small class="text-muted">Max file size: 5MB (JPEG, PNG)</small>
                            </div>
                            @if (currentAnnouncement.ImageData != null)
                            {
                                <div class="mt-3">
                                    <img src="@GetImageSrc(currentAnnouncement)" class="img-thumbnail d-block" style="max-height: 200px;" />
                                    <button type="button" @onclick="RemoveImage" class="btn btn-sm btn-danger mt-2">
                                        <i class="fas fa-trash-alt"></i> Remove Image
                                    </button>
                                </div>
                            }
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="visually-hidden">Loading...</span>
                                }
                                else
                                {
                                    <i class="fas fa-save"></i>
                                }
                                Save
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal" disabled="@isProcessing">
                                <i class="fas fa-times"></i> Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Image Preview Modal -->
@if (showImagePreview)
{
    <div class="modal fade show" style="display: block; background: rgba(0,0,0,0.9)" tabindex="-1" role="dialog" @onclick="CloseImagePreview">
        <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
            <div class="modal-content bg-transparent border-0">
                <div class="modal-body text-center">
                    <img src="@previewImageSrc" class="img-fluid" style="max-height: 80vh;" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<Announcement>? announcements;
    private bool showModal = false;
    private bool showImagePreview = false;
    private string previewImageSrc = string.Empty;
    private Announcement currentAnnouncement = new();
    private string? fileName;
    private string? statusMessage;
    private bool isProcessing = false;
    private string role = string.Empty;

    private AuthenticationState? authState;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            role = authState.User.FindFirst(ClaimTypes.Role)?.Value;
            
            await LoadAnnouncements();
        }
    }

    private async Task LoadAnnouncements()
    {
        try
        {
            isProcessing = true;
            announcements = await Http.GetFromJsonAsync<List<Announcement>>("api/announcement");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error loading announcements: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", statusMessage);
            await JSRuntime.InvokeVoidAsync("alert", "Failed to load announcements");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void ShowCreateModal()
    {
        currentAnnouncement = new Announcement();
        showModal = true;
    }

    private void ShowEditModal(Announcement announcement)
    {
        currentAnnouncement = new Announcement
            {
                Id = announcement.Id,
                Title = announcement.Title,
                Content = announcement.Content,
                ImageData = announcement.ImageData,
                ImageContentType = announcement.ImageContentType,
                CreatedAt = announcement.CreatedAt
            };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        StateHasChanged();
    }

    private void ShowImagePreview(Announcement announcement)
    {
        if (announcement.ImageData != null)
        {
            previewImageSrc = GetImageSrc(announcement);
            showImagePreview = true;
        }
    }

    private void CloseImagePreview()
    {
        showImagePreview = false;
    }

    private string GetImageSrc(Announcement announcement)
    {
        if (announcement.ImageData == null || announcement.ImageContentType == null)
            return string.Empty;

        return $"data:{announcement.ImageContentType};base64,{Convert.ToBase64String(announcement.ImageData)}";
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null) return;

            // Validate file size (max 5MB)
            if (file.Size > 5 * 1024 * 1024)
            {
                await JSRuntime.InvokeVoidAsync("alert", "File size must be less than 5MB");
                return;
            }

            // Validate content type
            if (!file.ContentType.StartsWith("image/"))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Only image files are allowed");
                return;
            }

            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(memoryStream);

            currentAnnouncement.ImageData = memoryStream.ToArray();
            currentAnnouncement.ImageContentType = file.ContentType;
            fileName = file.Name;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error uploading image: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error uploading image");
        }
    }

    private void RemoveImage()
    {
        currentAnnouncement.ImageData = null;
        currentAnnouncement.ImageContentType = null;
        fileName = null;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isProcessing = true;

            HttpResponseMessage response;
            if (currentAnnouncement.Id == 0)
            {
                response = await Http.PostAsJsonAsync("api/announcement", currentAnnouncement);
            }
            else
            {
                response = await Http.PutAsJsonAsync($"api/announcement/{currentAnnouncement.Id}", currentAnnouncement);
            }

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                throw new Exception(error);
            }

            showModal = false;
            await LoadAnnouncements();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error saving announcement: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", statusMessage);
            await JSRuntime.InvokeVoidAsync("alert", "Error saving announcement");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteAnnouncement(int id)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this announcement?"))
            return;

        try
        {
            isProcessing = true;
            var response = await Http.DeleteAsync($"api/announcement/{id}");

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                throw new Exception(error);
            }

            await LoadAnnouncements();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error deleting announcement: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", statusMessage);
            await JSRuntime.InvokeVoidAsync("alert", "Error deleting announcement");
        }
        finally
        {
            isProcessing = false;
        }
    }
}