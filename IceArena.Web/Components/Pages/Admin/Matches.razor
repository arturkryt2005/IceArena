@page "/matchesadmin"
@using IceArena.Data.Models
@inject NavigationManager NavigationManager
@inject HttpClient Http
@rendermode InteractiveServer
<PageTitle>Матчи</PageTitle>

<div class="dark-theme">
    <div class="add-team-form">
        <h2>Добавить команду</h2>
        <EditForm Model="@newTeam" OnValidSubmit="HandleAddTeam">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="teamName">Название команды:</label>
                <InputText id="teamName" class="form-control" @bind-Value="newTeam.Name" />
                <ValidationMessage For="@(() => newTeam.Name)" />
            </div>

            <button type="submit" class="btn btn-primary">Добавить команду</button>
        </EditForm>
    </div>

    @if (teams != null && teams.Count > 0)
    {
        <h2>Список команд</h2>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Название</th>
                    <th>Создано</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var team in teams)
                {
                    <tr>
                        <td>@team.Id</td>
                        <td>@team.Name</td>
                        <td>@team.CreatedAt.ToString("dd.MM.yyyy HH:mm")</td>
                        <td>
                            <button class="btn btn-sm btn-warning" @onclick="() => OpenEditTeamModal(team)">Редактировать</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteTeam(team.Id)" style="margin-left: 5px;">Удалить</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Нет доступных команд.</p>
    }
    <h1 class="page-title">Управление матчами</h1>

    <div class="add-match-form">
        <h2>Добавить матч</h2>
        <EditForm Model="@newMatch" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="team1">Команда 1:</label>
                <InputSelect id="team1" class="form-control" @bind-Value="newMatch.Team1Id">
                    <option value="">Выберите команду</option>
                    @if (teams != null)
                    {
                        @foreach (var team in teams)
                        {
                            <option value="@team.Id">@team.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => newMatch.Team1Id)" />
            </div>

            <div class="form-group">
                <label for="team2">Команда 2:</label>
                <InputSelect id="team2" class="form-control" @bind-Value="newMatch.Team2Id">
                    <option value="">Выберите команду</option>
                    @if (teams != null)
                    {
                        @foreach (var team in teams)
                        {
                            <option value="@team.Id">@team.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => newMatch.Team2Id)" />
            </div>

            <div class="form-group">
                <label for="matchDate">Дата и время матча:</label>
                <input type="datetime-local" id="matchDate" class="form-control" @bind="newMatch.MatchDate" />
                <ValidationMessage For="@(() => newMatch.MatchDate)" />
            </div>

            <div class="form-group">
                <label for="location">Место проведения:</label>
                <InputText id="location" class="form-control" @bind-Value="newMatch.Location" />
                <ValidationMessage For="@(() => newMatch.Location)" />
            </div>

            <div class="form-group">
                <label for="result">Результат:</label>
                <InputText id="result" class="form-control" @bind-Value="newMatch.Result" />
                <ValidationMessage For="@(() => newMatch.Result)" />
            </div>

            <button type="submit" class="btn btn-primary">Добавить матч</button>
        </EditForm>
    </div>

    @if (matches == null)
    {
        <p class="loading-message">Загрузка матчей...</p>
    }
    else if (matches.Count == 0)
    {
        <p class="no-matches-message">Нет активных матчей.</p>
    }
    else
    {
        <table class="matches-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Команда 1</th>
                    <th>Команда 2</th>
                    <th>Дата матча</th>
                    <th>Место проведения</th>
                    <th>Результат</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var match in matches)
                {
                    <tr>
                        <td>@match.Id</td>
                        <td>@match.Team1?.Name</td>
                        <td>@match.Team2?.Name</td>
                        <td>@match.MatchDate?.ToString("dd.MM.yyyy HH:mm")</td>
                        <td>@match.Location</td>
                        <td>@match.Result</td>
                        <td>
                            <button class="edit-button" @onclick="() => OpenEditModal(match)">Редактировать</button>
                            <button class="delete-button" @onclick="() => DeleteMatch(match.Id)">Удалить</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (showEditModal)
    {
        <div class="modal-overlay" @onclick="CloseEditModal">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Редактировать матч</h3>
                <EditForm Model="@editMatch" OnValidSubmit="HandleEditSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="editTeam1">Команда 1:</label>
                        <InputSelect id="editTeam1" class="form-control" @bind-Value="editMatch.Team1Id">
                            <option value="">Выберите команду</option>
                            @if (teams != null)
                            {
                                @foreach (var team in teams)
                                {
                                    <option value="@team.Id">@team.Name</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => editMatch.Team1Id)" />
                    </div>

                    <div class="form-group">
                        <label for="editTeam2">Команда 2:</label>
                        <InputSelect id="editTeam2" class="form-control" @bind-Value="editMatch.Team2Id">
                            <option value="">Выберите команду</option>
                            @if (teams != null)
                            {
                                @foreach (var team in teams)
                                {
                                    <option value="@team.Id">@team.Name</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => editMatch.Team2Id)" />
                    </div>

                    <div class="form-group">
                        <label for="editMatchDate">Дата и время матча:</label>
                        <input type="datetime-local" id="editMatchDate" class="form-control" @bind="editMatch.MatchDate" />
                        <ValidationMessage For="@(() => editMatch.MatchDate)" />
                    </div>

                    <div class="form-group">
                        <label for="editLocation">Место проведения:</label>
                        <InputText id="editLocation" class="form-control" @bind-Value="editMatch.Location" />
                        <ValidationMessage For="@(() => editMatch.Location)" />
                    </div>

                    <div class="form-group">
                        <label for="editResult">Результат:</label>
                        <InputText id="editResult" class="form-control" @bind-Value="editMatch.Result" />
                        <ValidationMessage For="@(() => editMatch.Result)" />
                    </div>

                    <button type="submit" class="btn btn-primary">Сохранить</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Отмена</button>
                </EditForm>
            </div>
        </div>
    }

    @if (showErrorModal)
    {
        <div class="modal-overlay" @onclick="CloseErrorModal">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Ошибка</h3>
                <p>@errorMessage</p>
                <button class="btn btn-secondary" @onclick="CloseErrorModal">Закрыть</button>
            </div>
        </div>
    }
    @if (showEditTeamModal)
    {
        <div class="modal-overlay" @onclick="CloseEditTeamModal">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Редактировать команду</h3>
                <EditForm Model="@editTeam" OnValidSubmit="HandleEditTeamSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="editTeamName">Название:</label>
                        <InputText id="editTeamName" class="form-control" @bind-Value="editTeam.Name" />
                        <ValidationMessage For="@(() => editTeam.Name)" />
                    </div>

                    <button type="submit" class="btn btn-primary">Сохранить</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditTeamModal">Отмена</button>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    private List<Match>? matches;
    private List<Team>? teams = new List<Team>();
    private Match newMatch = new Match();
    private Match editMatch = new Match();
    private bool showEditModal = false;
    private bool showErrorModal = false;
    private string errorMessage = "";
    private Team newTeam = new Team();
    private Team editTeam = new Team();
    private bool showEditTeamModal = false;
    [Inject]
    private IJSRuntime JsRuntime { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            matches = await Http.GetFromJsonAsync<List<Match>>("api/Match");
            teams = await Http.GetFromJsonAsync<List<Team>>("api/Team");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке данных: {ex.Message}");
        }
    }

    private void OpenEditTeamModal(Team team)
    {
        editTeam = new Team
            {
                Id = team.Id,
                Name = team.Name
            };
        showEditTeamModal = true;
    }

    private async Task HandleEditTeamSubmit()
    {
        if (string.IsNullOrWhiteSpace(editTeam.Name))
        {
            ShowError("Название команды обязательно.");
            return;
        }

        var response = await Http.PutAsJsonAsync($"api/Team/{editTeam.Id}", editTeam);
        if (response.IsSuccessStatusCode)
        {
            teams = await Http.GetFromJsonAsync<List<Team>>("api/Team");
            CloseEditTeamModal();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            ShowError($"Ошибка при обновлении команды: {error}");
        }
    }

    private async Task DeleteTeam(int teamId)
    {
        var confirmDelete = await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены, что хотите удалить эту команду?");
        if (!confirmDelete) return;

        var response = await Http.DeleteAsync($"api/Team/{teamId}");
        if (response.IsSuccessStatusCode)
        {
            teams = await Http.GetFromJsonAsync<List<Team>>("api/Team");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            ShowError($"Ошибка при удалении команды: {error}");
        }
    }

    private void CloseEditTeamModal()
    {
        showEditTeamModal = false;
        editTeam = new Team();
    }

    private async Task HandleAddTeam()
    {
        if (string.IsNullOrWhiteSpace(newTeam.Name))
        {
            ShowError("Название команды обязательно.");
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/Team", newTeam);
            if (response.IsSuccessStatusCode)
            {
                teams = await Http.GetFromJsonAsync<List<Team>>("api/Team");
                newTeam = new Team(); 
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ShowError($"Ошибка при добавлении команды: {error}");
            }
        }
        catch (Exception ex)
        {
            ShowError($"Исключение при добавлении команды: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (newMatch.Team1Id == newMatch.Team2Id)
            {
                ShowError("Команда 1 и команда 2 не могут быть одинаковыми.");
                return;
            }

            if (newMatch.MatchDate < DateTime.UtcNow)
            {
                ShowError("Дата матча не может быть в прошлом.");
                return;
            }

            if (string.IsNullOrWhiteSpace(newMatch.Location))
            {
                ShowError("Место проведения обязательно.");
                return;
            }

            if (newMatch.Location.Length > 100)
            {
                ShowError("Место проведения не может быть длиннее 100 символов.");
                return;
            }

            if (string.IsNullOrWhiteSpace(newMatch.Result))
            {
                ShowError("Результат обязателен.");
                return;
            }

            if (newMatch.Result.Length > 50)
            {
                ShowError("Результат не может быть длиннее 50 символов.");
                return;
            }

            if (newMatch.MatchDate.HasValue)
            {
                newMatch.MatchDate = DateTime.SpecifyKind(newMatch.MatchDate.Value, DateTimeKind.Utc);
            }

            var response = await Http.PostAsJsonAsync("api/Match", newMatch);

            if (response.IsSuccessStatusCode)
            {
                matches = await Http.GetFromJsonAsync<List<Match>>("api/Match");
                newMatch = new Match();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowError($"Ошибка при добавлении матча: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowError($"Исключение при добавлении матча: {ex.Message}");
        }
    }

    private async Task DeleteMatch(int matchId)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Match/{matchId}");

            if (response.IsSuccessStatusCode)
            {
                matches = await Http.GetFromJsonAsync<List<Match>>("api/Match");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowError($"Ошибка при удалении матча: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowError($"Исключение при удалении матча: {ex.Message}");
        }
    }

    private void OpenEditModal(Match match)
    {
        editMatch = new Match
            {
                Id = match.Id,
                Team1Id = match.Team1Id,
                Team2Id = match.Team2Id,
                MatchDate = match.MatchDate,
                Location = match.Location,
                Result = match.Result
            };
        showEditModal = true;
    }

    private async Task HandleEditSubmit()
    {
        try
        {
            if (editMatch.Team1Id == editMatch.Team2Id)
            {
                ShowError("Команда 1 и команда 2 не могут быть одинаковыми.");
                return;
            }

            if (string.IsNullOrWhiteSpace(editMatch.Location))
            {
                ShowError("Место проведения обязательно.");
                return;
            }

            if (editMatch.Location.Length > 100)
            {
                ShowError("Место проведения не может быть длиннее 100 символов.");
                return;
            }

            if (string.IsNullOrWhiteSpace(editMatch.Result))
            {
                ShowError("Результат обязателен.");
                return;
            }

            if (editMatch.Result.Length > 50)
            {
                ShowError("Результат не может быть длиннее 50 символов.");
                return;
            }

            if (editMatch.MatchDate.HasValue)
            {
                editMatch.MatchDate = DateTime.SpecifyKind(editMatch.MatchDate.Value, DateTimeKind.Utc);
            }

            var response = await Http.PutAsJsonAsync($"api/Match/{editMatch.Id}", editMatch);

            if (response.IsSuccessStatusCode)
            {
                matches = await Http.GetFromJsonAsync<List<Match>>("api/Match");
                CloseEditModal();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowError($"Ошибка при редактировании матча: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowError($"Исключение при редактировании матча: {ex.Message}");
        }
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        editMatch = new Match();
    }

    private void ShowError(string message)
    {
        errorMessage = message;
        showErrorModal = true;
    }

    private void CloseErrorModal()
    {
        showErrorModal = false;
        errorMessage = "";
    }
}
