@page "/users"
@using IceArena.Data.Models
@using IceArena.Data.Requests
@using Blazored.LocalStorage
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorage
@rendermode InteractiveServer
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
<PageTitle>Пользователи</PageTitle>

<style>
    .notification-message {
        color: #ffffff;
        background-color: #dc3545;
        padding: 10px;
        border-radius: 5px;
        margin-top: 10px;
        font-size: 0.9em;
        text-align: center;
    }
    .success-message {
        color: #ffffff;
        background-color: #28a745;
        padding: 10px;
        border-radius: 5px;
        margin-top: 10px;
        font-size: 0.9em;
        text-align: center;
    }
</style>

<div class="dark-theme">
    <h3 class="page-title">Пользователи</h3>

    <div class="form-container">
        <div class="input-group">
            <input type="email" placeholder="Email" @bind="email" class="form-input" maxlength="100" />
            @if (!string.IsNullOrEmpty(emailError))
            {
                <div class="error-message">@emailError</div>
            }
        </div>

        <div class="input-group">
            <input type="text" placeholder="Имя пользователя" @bind="username" class="form-input" maxlength="50" />
            @if (!string.IsNullOrEmpty(usernameError))
            {
                <div class="error-message">@usernameError</div>
            }
        </div>

        <div class="input-group">
            <input type="password" placeholder="Пароль" @bind="password" class="form-input" maxlength="50" />
            @if (!string.IsNullOrEmpty(passwordError))
            {
                <div class="error-message">@passwordError</div>
            }
        </div>

        <button @onclick="RegisterAdmin" class="submit-button">Добавить админа</button>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="notification-message">@errorMessage</div>
        }
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="success-message">@successMessage</div>
        }
    </div>

    @if (users == null)
    {
        <p>Загрузка...</p>
    }
    else if (users.Count == 0 || (users.Count == 1 && users.Any(u => u.Id.ToString() == currentUserId)))
    {
        <p>Пользователи не найдены.</p>
    }
    else
    {
        <div class="users-list">
            @foreach (var user in users.Where(u => u.Id.ToString() != currentUserId))
            {
                <div class="user-card">
                    <h4>@user.Username</h4>
                    <div class="user-email">@user.Email</div>
                    <div class="user-role">Роль: <span>@user.Role</span></div>
                    <div class="user-created">Создан: @user.CreatedAt.ToString("dd.MM.yyyy HH:mm")</div>
                    <button class="delete-button" @onclick="() => DeleteUser(user.Id)">Удалить</button>
                </div>
            }
        </div>
    }
</div>

@code {
    private string email = "";
    private string password = "";
    private string username = "";
    private string errorMessage = "";
    private string successMessage = "";
    private string emailError = "";
    private string usernameError = "";
    private string passwordError = "";
    private List<User>? users;
    private string? currentUserId;
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await Http.GetFromJsonAsync<List<User>>("api/User");
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при загрузке пользователей: {ex.Message}";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            try
            {
                currentUserId = await LocalStorage.GetItemAsync<string>("userId");

                if (string.IsNullOrEmpty(currentUserId))
                {
                    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                    currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                }

                if (string.IsNullOrEmpty(currentUserId))
                {
                    errorMessage = "Ошибка: не удалось определить текущего пользователя.";
                }
                else
                {
                    Console.WriteLine($"currentUserId: {currentUserId}");
                }

                isInitialized = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = $"Ошибка при получении текущего пользователя: {ex.Message}";
            }
        }
    }

    private async Task RegisterAdmin()
    {
        emailError = "";
        usernameError = "";
        passwordError = "";
        errorMessage = "";
        successMessage = "";

        if (string.IsNullOrEmpty(email))
        {
            emailError = "Email не может быть пустым.";
        }
        else if (!email.Contains("@") || !email.Contains("."))
        {
            emailError = "Email должен содержать символ @ и точку.";
        }
        else if (email.Length > 100)
        {
            emailError = "Email не может быть длиннее 100 символов.";
        }

        if (string.IsNullOrEmpty(username))
        {
            usernameError = "Имя пользователя не может быть пустым.";
        }
        else if (username.Length < 3)
        {
            usernameError = "Имя пользователя должно быть не менее 3 символов.";
        }
        else if (username.Length > 50)
        {
            usernameError = "Имя пользователя не может быть длиннее 50 символов.";
        }

        if (string.IsNullOrEmpty(password))
        {
            passwordError = "Пароль не может быть пустым.";
        }
        else if (password.Length < 6)
        {
            passwordError = "Пароль должен быть не менее 6 символов.";
        }
        else if (password.Length > 50)
        {
            passwordError = "Пароль не может быть длиннее 50 символов.";
        }

        if (!string.IsNullOrEmpty(emailError) || !string.IsNullOrEmpty(usernameError) || !string.IsNullOrEmpty(passwordError))
        {
            return;
        }

        var request = new RegisterRequest
        {
            Email = email,
            Password = password,
            Username = username
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/Auth/register-admin", request);
            if (response.IsSuccessStatusCode)
            {
                users = await Http.GetFromJsonAsync<List<User>>("api/User");
                email = "";
                username = "";
                password = "";
                successMessage = "Админ успешно добавлен.";
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Ошибка при добавлении пользователя: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при регистрации: {ex.Message}";
        }
    }

    private async Task DeleteUser(int userId)
    {
        errorMessage = "";
        successMessage = "";
        Console.WriteLine($"Attempting to delete user with ID: {userId}, currentUserId: {currentUserId}");

        if (string.IsNullOrEmpty(currentUserId))
        {
            errorMessage = "Ошибка: текущий пользователь не идентифицирован.";
            Console.WriteLine("DeleteUser: currentUserId is empty");
            return;
        }

        if (userId.ToString() == currentUserId)
        {
            errorMessage = "Вы не можете удалить свою учетную запись.";
            Console.WriteLine("DeleteUser: Attempted to delete own account");
            return;
        }

        try
        {
            var requestUri = $"api/User/{userId}";
            Console.WriteLine($"Sending DELETE request to: {requestUri}");
            var response = await Http.DeleteAsync(requestUri);
            Console.WriteLine($"Response status code: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("User deleted successfully, refreshing user list");
                users = await Http.GetFromJsonAsync<List<User>>("api/User");
                successMessage = "Пользователь успешно удалён.";
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                if (response.StatusCode == System.Net.HttpStatusCode.InternalServerError && errorContent.Contains("23503") && errorContent.Contains("FK_bookings_users_user_id"))
                {
                    errorMessage = "Этот пользователь участвует в бронировании и не может быть удалён.";
                }
                else
                {
                    try
                    {
                        var errorJson = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(errorContent);
                        errorMessage = errorJson?["Error"] ?? $"Ошибка при удалении пользователя: {errorContent}";
                    }
                    catch
                    {
                        errorMessage = $"Ошибка при удалении пользователя: {errorContent}";
                    }
                }
                Console.WriteLine($"DeleteUser error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при удалении: {ex.Message}";
            Console.WriteLine($"DeleteUser exception: {ex.Message}");
        }
    }
}