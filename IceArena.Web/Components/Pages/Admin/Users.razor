@page "/users"
@using IceArena.Data.Models
@using IceArena.Data.Requests
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject HttpClient Http
@rendermode InteractiveServer
<PageTitle>Пользователи</PageTitle>

<div class="dark-theme">
    <h3 class="page-title">Пользователи</h3>

    <div class="form-container">
        <div class="input-group">
            <input type="email" placeholder="Email" @bind="email" class="form-input" maxlength="100" />
            @if (!string.IsNullOrEmpty(emailError))
            {
                <div class="error-message">@emailError</div>
            }
        </div>

        <div class="input-group">
            <input type="text" placeholder="Имя пользователя" @bind="username" class="form-input" maxlength="50" />
            @if (!string.IsNullOrEmpty(usernameError))
            {
                <div class="error-message">@usernameError</div>
            }
        </div>

        <div class="input-group">
            <input type="password" placeholder="Пароль" @bind="password" class="form-input" maxlength="50" />
            @if (!string.IsNullOrEmpty(passwordError))
            {
                <div class="error-message">@passwordError</div>
            }
        </div>

        <button @onclick="RegisterAdmin" class="submit-button">Добавить админа</button>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@errorMessage</div>
        }
    </div>

    @if (users == null)
    {
        <p>Загрузка...</p>
    }
    else
    {
        <div class="users-list">
            @foreach (var user in users)
            {
                <div class="user-card">
                    <h4>@user.Username</h4>
                    <div class="user-email">@user.Email</div>
                    <div class="user-role">Роль: <span>@user.Role</span></div>
                    <div class="user-created">Создан: @user.CreatedAt.ToString("dd.MM.yyyy HH:mm")</div>
                    <button class="delete-button" @onclick="() => DeleteUser(user.Id)">Удалить</button>
                </div>
            }
        </div>
    }
</div>

@code {
    private string email = "";
    private string password = "";
    private string username = "";
    private string errorMessage = "";
    private string emailError = "";
    private string usernameError = "";
    private string passwordError = "";
    private List<User>? users;

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<List<User>>("api/User");
    }

    private async Task RegisterAdmin()
    {
        emailError = "";
        usernameError = "";
        passwordError = "";
        errorMessage = "";

        if (string.IsNullOrEmpty(email))
        {
            emailError = "Email не может быть пустым.";
        }
        else if (!email.Contains("@") || !email.Contains("."))
        {
            emailError = "Email должен содержать символ @ и точку.";
        }
        else if (email.Length > 100)
        {
            emailError = "Email не может быть длиннее 100 символов.";
        }

        if (string.IsNullOrEmpty(username))
        {
            usernameError = "Имя пользователя не может быть пустым.";
        }
        else if (username.Length < 3)
        {
            usernameError = "Имя пользователя должно быть не менее 3 символов.";
        }
        else if (username.Length > 50)
        {
            usernameError = "Имя пользователя не может быть длиннее 50 символов.";
        }

        if (string.IsNullOrEmpty(password))
        {
            passwordError = "Пароль не может быть пустым.";
        }
        else if (password.Length < 6)
        {
            passwordError = "Пароль должен быть не менее 6 символов.";
        }
        else if (password.Length > 50)
        {
            passwordError = "Пароль не может быть длиннее 50 символов.";
        }

        if (!string.IsNullOrEmpty(emailError) || !string.IsNullOrEmpty(usernameError) || !string.IsNullOrEmpty(passwordError))
        {
            return;
        }

        var request = new RegisterRequest
            {
                Email = email,
                Password = password,
                Username = username
            };

        var response = await Http.PostAsJsonAsync("api/Auth/register-admin", request);
        if (response.IsSuccessStatusCode)
        {
            users = await Http.GetFromJsonAsync<List<User>>("api/User");
        }
        else
        {
            errorMessage = "Ошибка при добавлении пользователя.";
        }
    }

    private async Task DeleteUser(int userId)
    {
        var response = await Http.DeleteAsync($"api/User/{userId}");
        if (response.IsSuccessStatusCode)
        {
            users = await Http.GetFromJsonAsync<List<User>>("api/User");
        }
        else
        {
            errorMessage = "Ошибка при удалении пользователя.";
        }
    }
}