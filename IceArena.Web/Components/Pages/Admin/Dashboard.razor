@page "/dashboard"
@inject HttpClient Http
@using IceArena.Data.Models

<h3>Админская часть</h3>

<div class="dashboard-container">
    <div class="stats-cards">
        <div class="card">
            <div class="card-icon">📊</div>
            <div class="card-content">
                <h4>Всего бронирований</h4>
                <p>@totalBookings</p>
            </div>
        </div>
        <div class="card">
            <div class="card-icon">✅</div>
            <div class="card-content">
                <h4>Доступно</h4>
                <p>@availableBookings</p>
            </div>
        </div>
        <div class="card">
            <div class="card-icon">⏳</div>
            <div class="card-content">
                <h4>В ожидании</h4>
                <p>@pendingBookings</p>
            </div>
        </div>
        <div class="card">
            <div class="card-icon">❌</div>
            <div class="card-content">
                <h4>Подтверждено</h4>
                <p>@bookedBookings</p>
            </div>
        </div>
    </div>

    <div class="recent-actions">
        <h4>Последние действия</h4>
        <table class="actions-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Действие</th>
                    <th>Пользователь</th>
                    <th>Дата</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>1</td>
                    <td>Бронирование создано</td>
                    <td>user123</td>
                    <td>01.10.2023 14:30</td>
                </tr>
                <tr>
                    <td>2</td>
                    <td>Бронирование подтверждено</td>
                    <td>admin</td>
                    <td>01.10.2023 15:00</td>
                </tr>
                <tr>
                    <td>3</td>
                    <td>Бронирование отменено</td>
                    <td>user456</td>
                    <td>01.10.2023 16:15</td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="action-buttons">
        <button class="btn btn-secondary" @* @onclick="ExportData" *@>Экспорт данных</button>
        <button class="btn btn-danger">Очистить логи</button>
    </div>
</div>

@code {
    private int totalBookings = 0;
    private int pendingBookings = 0;
    private int availableBookings = 0;
    private int bookedBookings = 0;

    /// <summary>
    /// фцв
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var bookings = await Http.GetFromJsonAsync<List<Booking>>("api/Booking");
        if (bookings != null)
        {
            totalBookings = bookings.Count;
            availableBookings = bookings.Count(b => b.Status == "Available");
            pendingBookings = bookings.Count(b => b.Status == "Pending");
            bookedBookings = bookings.Count(b => b.Status == "Booked");
        }

    }

    // private async Task ExportData()
    // {
    //     var bookings = await Http.GetFromJsonAsync<List<Booking>>("api/Booking");
    //     if (bookings == null) return;

    //     var csvContent = new StringBuilder();
    //     csvContent.AppendLine("ID,User ID,Date,Duration,Status,Created At"); 

    //     foreach (var booking in bookings)
    //     {
    //         csvContent.AppendLine($"{booking.Id},{booking.UserId},{booking.Date:dd.MM.yyyy HH:mm},{booking.Duration},{booking.Status},{booking.CreatedAt:dd.MM.yyyy HH:mm}");
    //     }

    //     var fileName = $"bookings_export_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
    //     await FileUtil.SaveAsAsync(JSRuntime, fileName, csvContent.ToString());
    // }
}