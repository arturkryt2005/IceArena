@page "/profile"
@using IceArena.Data.Models
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@rendermode InteractiveServer

<h2 class="profile-header">Профиль</h2>

@if (!isInitialized)
{
    <p class="loading-text">Загрузка данных...</p>
}
else if (!isAuthenticated)
{
    <div class="unauthorized-card">
        <h4>Вы не авторизованы</h4>
        <a href="/" class="btn btn-primary">Войти</a>
    </div>
}
else
{
    <div class="profile-card">
        <div class="avatar-section">
            <img src="../images/profile.png" alt="Аватар" class="avatar-img" />
            <h3>@username</h3>
        </div>

        <div class="user-info">
            <div class="info-row">
                <strong>Email:</strong> @userEmail
            </div>
            <div class="info-row">
                <strong>Телефон:</strong> @phone
            </div>
            <button class="btn btn-outline-primary edit-button" @onclick="OpenEditModal">Редактировать</button>
        </div>
    </div>

    <div class="booking-history">
        <h4 style="color:white">История бронирований</h4>

        @if (bookings == null)
        {
            <p>Загрузка истории...</p>
        }
        else if (bookings.Count == 0)
        {
            <p class="no-bookings">У вас пока нет бронирований.</p>
        }
        else
        {
            @if (upcomingBookings.Count > 0)
            {
                <h5 style="color: var(--gold); margin-top: 2rem;">Актуальные брони</h5>
                <div class="history-list">
                    @foreach (var booking in upcomingBookings.OrderByDescending(b => b.Date).ThenBy(b => b.StartTime))
                    {
                        <div class="booking-item">
                            <span class="booking-date">@booking.Date.ToShortDateString()</span>
                            <span class="booking-time">@booking.StartTime.ToString("hh\\:mm") - @booking.EndTime.ToString("hh\\:mm")</span>
                            <span class="booking-status @(GetStatusClass(booking.Status))">
                                🟢 @booking.Status
                            </span>
                        </div>
                    }
                </div>
            }

            @if (pastBookings.Count > 0)
            {
                <h5 style="color: var(--text-secondary); margin-top: 2rem;">Прошедшие брони</h5>
                <div class="history-list">
                    @foreach (var booking in pastBookings.OrderByDescending(b => b.Date).ThenBy(b => b.StartTime))
                    {
                        <div class="booking-item">
                            <span class="booking-date">@booking.Date.ToShortDateString()</span>
                            <span class="booking-time">@booking.StartTime.ToString("hh\\:mm") - @booking.EndTime.ToString("hh\\:mm")</span>
                            <span class="booking-status @(GetStatusClass(booking.Status))">
                                 @booking.Status
                            </span>
                        </div>
                    }
                </div>
            }
        }
    </div>
}

@if (showEditModal)
{
    <div class="modal-overlay" @onclick="CloseEditModal">
        <div class="dark-modal" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>Редактировать профиль</h3>
                <button @onclick="CloseEditModal" class="close-btn">
                    &times;
                </button>
            </div>

            <EditForm Model="@editedUser" OnValidSubmit="SaveUserChanges">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Имя</label>
                    <InputText @bind-Value="editedUser.Username" class="form-input" placeholder="Введите имя" />
                    <ValidationMessage For="@(() => editedUser.Username)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="editedUser.Email" class="form-input" placeholder="example@mail.com" />
                    <ValidationMessage For="@(() => editedUser.Email)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label>Телефон</label>
                    <InputText @bind-Value="editedUser.PhoneNumber" class="form-input" placeholder="+7 (XXX) XXX-XX-XX" />
                    <ValidationMessage For="@(() => editedUser.PhoneNumber)" class="validation-message" />
                </div>

                <div class="form-actions">
                    <button type="button" @onclick="CloseEditModal" class="cancel-btn">
                        Отмена
                    </button>
                    <button type="submit" class="submit-btn">
                        Сохранить
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}


@code {
    private bool isAuthenticated = false;
    private bool isInitialized = false;
    private string username = "";
    private string userEmail = "";
    private string role = "";
    private string phone = "";
    private int userId = 0;
    private List<IceArena.Data.Models.Booking> bookings = new();
    private bool showEditModal = false;
    private User editedUser = new();
    private List<IceArena.Data.Models.Booking> upcomingBookings = new();
    private List<IceArena.Data.Models.Booking> pastBookings = new();


    protected override async Task OnInitializedAsync()
    {
        isInitialized = false;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadUserData();
        }
    }

    private async Task LoadUserData()
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            username = await LocalStorage.GetItemAsStringAsync("username") ?? "Неизвестно";
            phone = await LocalStorage.GetItemAsStringAsync("phone") ?? "Неизвестно";
            userEmail = await LocalStorage.GetItemAsStringAsync("email") ?? "Неизвестно";
            role = await LocalStorage.GetItemAsStringAsync("role") ?? "Пользователь";

            var userIdString = await LocalStorage.GetItemAsStringAsync("userId");
            if (int.TryParse(userIdString, out var id))
            {
                userId = id;
                isAuthenticated = !string.IsNullOrEmpty(token);

                bookings = await Http.GetFromJsonAsync<List<IceArena.Data.Models.Booking>>($"api/Booking/user/{userId}") ?? new();
                var now = DateTime.Now;
                upcomingBookings = bookings.Where(b => b.Date.Date >= now.Date).ToList();
                pastBookings = bookings.Where(b => b.Date.Date < now.Date).ToList();

                Console.WriteLine($"Загружено {bookings.Count} бронирований:");
                foreach (var booking in bookings)
                {
                    Console.WriteLine($"ID: {booking.Id}, Статус: {booking.Status}");
                }
            }

            isInitialized = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки данных: {ex.Message}");
            isInitialized = true;
            StateHasChanged();
        }
    }

    private async Task SaveUserChanges()
    {
        var response = await Http.PutAsJsonAsync($"api/User/{editedUser.Id}", editedUser);

        if (response.IsSuccessStatusCode)
        {
            username = editedUser.Username;
            userEmail = editedUser.Email;
            role = editedUser.Role;
            phone = editedUser.PhoneNumber;

            await LocalStorage.SetItemAsStringAsync("username", username);
            await LocalStorage.SetItemAsStringAsync("email", userEmail);
            await LocalStorage.SetItemAsStringAsync("role", role);
            await LocalStorage.SetItemAsStringAsync("phone", phone);

            showEditModal = false;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Ошибка при сохранении изменений.");
        }
    }

    private void OpenEditModal()
    {
        editedUser = new User
            {
                Id = userId,
                Username = username,
                Email = userEmail,
                Role = role,
                PhoneNumber = phone
            };
        showEditModal = true;
        StateHasChanged();
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        StateHasChanged();
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Pending" => "pending",
            "Booked" => "booked",
            "Confirmed" => "confirmed",
            "Cancelled" => "cancelled",
            _ => ""
        };
    }
}