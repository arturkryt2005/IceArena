@page "/matches"
@using IceArena.Web.Interfaces
@using IceArena.Web.Models
@using IceArena.Web.Services
@inject IMatchService MatchService

<h3 class="basezagolovok">Список матчей</h3>

@if (pastMatches == null || futureMatches == null)
{
    <p>Загрузка...</p>
}
else
{
    @if (pastMatches.Any())
    {
        <h4 class="basezag">Прошедшие матчи</h4>
        <div class="matches-grid">
            @foreach (var match in pastMatches)
            {
                <div class="match-card past">
                    <div class="match-date">@match.MatchDate.ToString("dd.MM.yyyy HH:mm")</div>
                    <div class="match-teams">
                        <span class="team">@(match.Team1Id == default ? "Неизвестно" : match.Team1Id)</span>
                        <span class="vs">vs</span>
                        <span class="team">@(match.Team2Id == default ? "Неизвестно" : match.Team2Id)</span>
                    </div>
                    <div class="match-location">@(match.Location ?? "Место проведения не указано")</div>
                    <div class="match-status">@(match.Result ?? "Планируется")</div>
                </div>
            }
        </div>
    }

    @if (futureMatches.Any())
    {
        <h4 class="basezag">Будущие матчи</h4>
        <div class="matches-grid">
            @foreach (var match in futureMatches)
            {
                <div class="match-card future">
                    <div class="match-date">@match.MatchDate.ToString("dd.MM.yyyy HH:mm")</div>
                    <div class="match-teams">
                        <span class="team">@(match.Team1Id == default ? "Неизвестно" : match.Team1Id)</span>
                        <span class="vs">vs</span>
                        <span class="team">@(match.Team2Id == default ? "Неизвестно" : match.Team2Id)</span>
                    </div>
                    <div class="match-location">@(match.Location ?? "Место проведения не указано")</div>
                    <div class="match-status">@(match.Result ?? "Планируется")</div>
                </div>
            }
        </div>
    }

    @if (!pastMatches.Any() && !futureMatches.Any())
    {
        <p class="no-matches">Нет доступных матчей.</p>
    }
}

@code {
    private List<MatchDto>? matches;
    private List<MatchDto> pastMatches = new();
    private List<MatchDto> futureMatches = new();

    protected override async Task OnInitializedAsync()
    {
        matches = await MatchService.GetMatchesAsync();

        if (matches != null)
        {
            var now = DateTime.Now;

            pastMatches = matches.Where(m => m.MatchDate < now).ToList();
            futureMatches = matches.Where(m => m.MatchDate >= now).ToList();
        }
    }
}