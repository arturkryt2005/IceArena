@page "/team"
@using HtmlAgilityPack
@inject HttpClient Http

<h3>Команда</h3>

@if (teamMembers == null)
{
    <p>Загрузка данных...</p>
}
else
{
    <div class="team-container">
        <div class="coach-card">
            <h4>Тренер</h4>
            @foreach (var coach in teamMembers.Where(m => m.Role == "Тренер"))
            {
                <img src="@coach.PhotoUrl" alt="@coach.Name" onerror="this.src='../images/coach.png'" />
                <p><strong>Имя:</strong> @coach.Name</p>
                <p><strong>Год рождения:</strong> @coach.BirthYear</p>
                <p><strong>Описание:</strong> @coach.Description</p>
            }
        </div>

        <div class="players-container">
            @foreach (var player in teamMembers.Where(m => m.Role != "Тренер"))
            {
                <div class="player-card">
                    <h4>@player.Position</h4>
                    <img src="@player.PhotoUrl" alt="@player.Name" onerror="this.src='../images/hockey_player.png'" />
                    <p><strong>Имя:</strong> @player.Name</p>
                    <p><strong>Год рождения:</strong> @player.BirthYear</p>
                    <p><strong>Описание:</strong> @player.Description</p>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<TeamMember> teamMembers;

    protected override async Task OnInitializedAsync()
    {
        // Парсим данные с сайта
        var htmlContent = await Http.GetStringAsync("https://fhrt.ru/team/roster/328/16#roster");
        teamMembers = ParseTeamData(htmlContent);
    }

    private List<TeamMember> ParseTeamData(string htmlContent)
    {
        var members = new List<TeamMember>();
        var htmlDocument = new HtmlDocument();
        htmlDocument.LoadHtml(htmlContent);

        // Находим основную таблицу
        var mainTable = htmlDocument.DocumentNode.SelectSingleNode("//table[contains(@class, 'table-striped')]");
        if (mainTable == null)
        {
            Console.WriteLine("Основная таблица не найдена!");
            return members;
        }

        // Парсим все строки таблицы
        var rows = mainTable.SelectNodes(".//tr");
        if (rows == null) return members;

        bool isCoachesSection = false;
        bool isPlayersSection = false;

        foreach (var row in rows)
        {
            // Определяем текущую секцию
            var titleCell = row.SelectSingleNode(".//td[contains(@class, 'roster__title-row')]");
            if (titleCell != null)
            {
                if (titleCell.InnerText.Contains("Тренеры"))
                {
                    isCoachesSection = true;
                    isPlayersSection = false;
                    continue;
                }
                else if (titleCell.InnerText.Contains("Игроки"))
                {
                    isCoachesSection = false;
                    isPlayersSection = true;
                    continue;
                }
            }

            // Пропускаем заголовки столбцов
            if (row.SelectSingleNode(".//th") != null) continue;

            // Обрабатываем данные
            var cells = row.SelectNodes(".//td");
            if (cells == null) continue;

            // Извлекаем фото (общее для тренеров и игроков)
            var photoNode = cells[0].SelectSingleNode(".//img[contains(@class, 'roster__photo')]");
            string photoUrl = photoNode?.GetAttributeValue("src", "") ?? "";

            if (isCoachesSection && cells.Count >= 3)
            {
                // Парсим тренера
                var nameLink = cells[0].SelectSingleNode(".//a[.//span[contains(@class, 'roster__')]]");
                if (nameLink != null)
                {
                    var surname = nameLink.SelectSingleNode(".//span[contains(@class, 'roster__surname')]")?.InnerText.Trim() ?? "";
                    var name = nameLink.SelectSingleNode(".//span[contains(@class, 'roster__name')]")?.InnerText.Trim() ?? "";
                    var patronymic = nameLink.SelectSingleNode(".//span[contains(@class, 'roster__patronymic')]")?.InnerText.Trim() ?? "";

                    members.Add(new TeamMember
                        {
                            Role = "Тренер",
                            Name = $"{surname} {name} {patronymic}".Trim(),
                            BirthYear = ExtractYearFromDate(cells[1].InnerText.Trim()),
                            Description = $"Тренер, место рождения: {cells[2].InnerText.Trim()}",
                            PhotoUrl = photoUrl
                        });
                }
            }
            else if (isPlayersSection && cells.Count >= 4)
            {
                // Парсим игрока
                var nameLink = cells[0].SelectSingleNode(".//a[.//span[contains(@class, 'roster__')]]");
                if (nameLink != null)
                {
                    var surname = nameLink.SelectSingleNode(".//span[contains(@class, 'roster__surname')]")?.InnerText.Trim() ?? "";
                    var name = nameLink.SelectSingleNode(".//span[contains(@class, 'roster__name')]")?.InnerText.Trim() ?? "";
                    var patronymic = nameLink.SelectSingleNode(".//span[contains(@class, 'roster__patronymic')]")?.InnerText.Trim() ?? "";

                    members.Add(new TeamMember
                        {
                            Role = "Игрок",
                            Position = cells[2].InnerText.Trim(),
                            Name = $"{surname} {name} {patronymic}".Trim(),
                            BirthYear = ExtractYearFromDate(cells[1].InnerText.Trim()),
                            Description = $"{cells[2].InnerText.Trim()}",
                            PhotoUrl = photoUrl
                        });
                }
            }
        }

        return members;
    }

    private string ExtractYearFromDate(string dateString)
    {
        if (DateTime.TryParse(dateString, out var date))
        {
            return date.Year.ToString();
        }
        return dateString;
    }

    public class TeamMember
    {
        public string Role { get; set; }
        public string Position { get; set; }
        public string Name { get; set; }
        public string BirthYear { get; set; }
        public string Description { get; set; }
        public string PhotoUrl { get; set; }
    }
}