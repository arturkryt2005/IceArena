@page "/"
@rendermode InteractiveServer
@using Blazored.LocalStorage
@using IceArena.Web.Interfaces
@using IceArena.Web.Models
@using IceArena.Web.Services
@using IceArena.Data.Models
@inject IMatchServiceee MatchService
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using IceArena.Web.Components.Modal
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage

<div class="carousel-container">
    <div class="carousel">
        <div class="arrow left">&lt;</div>
        <img src="images/ledoviy.jpg" alt="Картинка">
        <div class="arrow right">&gt;</div>
    </div>
    <div class="carousel-text">
        <h2 class="glavtext">Добро пожаловать в Ледовый Дворец!</h2>
        <p class="secondtext">Лучшее место для отдыха и спорта</p>
    </div>
</div>

<PageTitle>Главная</PageTitle>
<h3 class="zagolovki">Список матчей</h3>

@if (matches == null)
{
    <p>Загрузка...</p>
}
else
{
    <div class="matchesdiv">
        <table class="match-table">
            <thead>
                <tr>
                    <th>Дата</th>
                    <th>Команда 1</th>
                    <th>Команда 2</th>
                    <th>Место проведения</th>
                    <th>Статус</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var match in matches)
                {
                    <tr>
                        <td>@match.MatchDate?.ToString("dd.MM.yyyy HH:mm")</td>
                        <td>@match.Team1Name</td>
                        <td>@match.Team1Name</td>
                        <td>@(match.Location ?? "Не указано")</td>
                        <td>@(match.Result ?? "Планируется")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<div class="announcements-carousel-container mt-5">
    <h2 class="zag">Новости и объявления</h2>

    @if (announcements == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (announcements.Any())
    {
        <div id="announcementsCarousel" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-indicators">
                @for (int i = 0; i < announcements.Count; i++)
                {
                    <button type="button"
                            data-bs-target="#announcementsCarousel"
                            data-bs-slide-to="@i"
                            class="@(i == 0 ? "active" : "")"
                            aria-current="@(i == 0 ? "true" : "")"
                            aria-label="Slide @(i + 1)"></button>
                }
            </div>

            <div class="carousel-inner">
                @for (int i = 0; i < announcements.Count; i++)
                {
                    var announcement = announcements[i];
                    <div class="carousel-item @(i == 0 ? "active" : "")">
                        <div class="announcement-card">
                            @if (announcement.ImageData != null)
                            {
                                <img src="@GetImageSrc(announcement)"
                                     class="announcement-image"
                                     alt="@announcement.Title" />
                            }
                            <div class="announcement-content">
                                <h3>@announcement.Title</h3>
                                <p>@announcement.Content</p>
                                <small class="text-muted">
                                    @announcement.CreatedAt.ToString("dd.MM.yyyy")
                                </small>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <button class="carousel-control-prev" type="button" data-bs-target="#announcementsCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#announcementsCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>
    }
    else
    {
        <div class="alert alert-info">Нет доступных объявлений</div>
    }
</div>

@code {
    private List<MatchDto>? matches;
    private List<Announcement>? announcements;

    protected override async Task OnInitializedAsync()
    {
        matches = await MatchService.GetMatchesAsync();
        await LoadAnnouncements();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeMainCarousel");
                await JSRuntime.InvokeVoidAsync("initializeAnnouncementsCarousel");
            }
            catch (JSException ex)
            {
                Console.WriteLine($"Error initializing carousels: {ex.Message}");
            }
        }
    }

    private async Task LoadAnnouncements()
    {
        try
        {
            announcements = await Http.GetFromJsonAsync<List<Announcement>>("api/announcement");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading announcements: {ex.Message}");
        }
    }

    private string GetImageSrc(Announcement announcement)
    {
        if (announcement.ImageData == null || announcement.ImageContentType == null)
            return string.Empty;

        return $"data:{announcement.ImageContentType};base64,{Convert.ToBase64String(announcement.ImageData)}";
    }
}